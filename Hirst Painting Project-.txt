Hirst Painting Project:-

This project aims to recreate a digital version of Damien Hirst's spot paintings using Python's turtle module and the colorgram library to extract colors from an image. The code provided generates a grid of colored dots on the screen, similar to Hirst's signature style.

Code Documentation:

Importing Libraries:

1. import turtle as turtle_module
2. import random

- turtle: A module in Python that provides a way to create drawings and animations.

- random: A module that implements pseudo-random number generators for various distributions.


Setting Up the Turtle Module:-

turtle_module.colormode(255)
tim = turtle_module.Turtle()
tim.speed("fastest")
tim.penup()
tim.hideturtle()

~ colormode(255): Sets the color mode to use RGB values ranging from 0 to 255.

~ tim = turtle_module.Turtle(): Creates a turtle object named tim.

~ tim.speed("fastest"): Sets the drawing speed of the turtle to the fastest.

~ tim.penup(): Ensures the turtle does not draw while moving to the starting position.

~ tim.hideturtle(): Hides the turtle cursor.

Defining the Color List:
color_list = [(230, 222, 218), (231, 224, 228), (223, 221, 228), (218, 173, 125), (159, 181, 190), (134, 73, 53), (50, 103, 154), (118, 81, 92), (179, 142, 152), (162, 104, 151), (42, 47, 66), (128, 174, 115), (83, 96, 183), (67, 9, 27), (82, 133, 107), (52, 63, 78), (228, 189, 141), (194, 91, 72), (220, 226, 221), (62, 49, 38), (115, 41, 56), (91, 143, 118), (70, 67, 52), (209, 181, 189), (181, 185, 210), (209, 183, 178), (89, 55, 47), (183, 201, 179), (172, 199, 204), (41, 73, 83)]

This list contains the RGB values of the colors extracted from the image using the colorgram library.


Positioning the Turtle:

tim.setheading(225)
tim.forward(300)
tim.setheading(0)

~tim.setheading(225): Sets the direction of the turtle to 225 degrees.

~tim.forward(300): Moves the turtle forward by 300 units.

~tim.setheading(0): Sets the direction of the turtle to 0 degrees (facing right).

Drawing the Dots:

number_of_dots = 100

for dot_count in range(1, number_of_dots + 1):
    tim.dot(20, random.choice(color_list))
    tim.forward(50)

    if dot_count % 10 == 0:
        tim.setheading(90)
        tim.forward(50)
        tim.setheading(180)
        tim.forward(500)
        tim.setheading(0)


~ number_of_dots = 100: Defines the number of dots to be drawn.

~ for dot_count in range(1, number_of_dots + 1): Loop to draw 100 dots.
 
~ tim.dot(20, random.choice(color_list)): Draws a dot with a diameter of 20 units, randomly selecting a color from the color_list.

~ tim.forward(50): Moves the turtle forward by 50 units.

  
   ~ if dot_count % 10 == 0: After every 10 dots, the turtle moves up and to the left to start a new row.

   ~ tim.setheading(90): Sets the direction to 90 degrees (upwards).

   ~ tim.forward(50): Moves the turtle up by 50 units.

   ~ tim.setheading(180): Sets the direction to 180 degrees (left).
 
   ~ tim.forward(500): Moves the turtle left by 500 units.

   ~ tim.setheading(0): Sets the direction to 0 degrees (right).


Displaying the Output: 

screen = turtle_module.Screen()

screen.exitonclick()

~ screen = turtle_module.Screen(): Creates a screen object to control the turtle graphics window.
~ screen.exitonclick(): Keeps the screen open until a click is detected.

Conclusion:
This code recreates Damien Hirst's spot paintings by drawing a grid of colored dots using the turtle module in Python. The colors are extracted from an image using the colorgram library, providing a variety of hues and shades for the dots. The turtle's movements are controlled to ensure an even distribution of dots on the screen.

Output:


